\hypertarget{bisection_8cpp}{}\section{src/roots/bisection.cpp File Reference}
\label{bisection_8cpp}\index{src/roots/bisection.\+cpp@{src/roots/bisection.\+cpp}}


Bisection implementation file for root finding algorhitm based on bisecting.  


{\ttfamily \#include $<$iostream$>$}\\*
{\ttfamily \#include $<$cmath$>$}\\*
{\ttfamily \#include $<$limits$>$}\\*
{\ttfamily \#include \char`\"{}bisection.\+hpp\char`\"{}}\\*
Include dependency graph for bisection.\+cpp\+:
% FIG 0
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
double {\bfseries f1} (double x)\hypertarget{bisection_8cpp_a5b75da2e4107a47bfc83df36229d9c09}{}\label{bisection_8cpp_a5b75da2e4107a47bfc83df36229d9c09}

\item 
double {\bfseries f2} (double x)\hypertarget{bisection_8cpp_a50927d5ca425d903b26515439060bde9}{}\label{bisection_8cpp_a50927d5ca425d903b26515439060bde9}

\item 
double {\bfseries f3} (double x)\hypertarget{bisection_8cpp_a33e8e708441ffdbb7cdf216139174243}{}\label{bisection_8cpp_a33e8e708441ffdbb7cdf216139174243}

\item 
double \hyperlink{bisection_8cpp_afac1ad62f43478efd3c37fa6fb03f9ae}{bisection} (double($\ast$f)(double), double a, double b, double tol, int max\+Iteration)
\begin{DoxyCompactList}\small\item\em Bisection root finding function. \end{DoxyCompactList}\item 
double \hyperlink{bisection_8cpp_ac995c7f4dab6edcddcae1f302aec7a99}{bisection} (double($\ast$f)(double), double a, double b)
\begin{DoxyCompactList}\small\item\em Bisection root finding function with default tolerance 1e-\/6 and maximun iterations 1e6. \end{DoxyCompactList}\item 
int {\bfseries main} (void)\hypertarget{bisection_8cpp_a840291bc02cba5474a4cb46a9b9566fe}{}\label{bisection_8cpp_a840291bc02cba5474a4cb46a9b9566fe}

\end{DoxyCompactItemize}


\subsection{Detailed Description}
Bisection implementation file for root finding algorhitm based on bisecting. 

Implementation of root finding algorhitm based on bisection. Algorhitm works in closed domain \mbox{[}a,b\mbox{]} where the limit values have different signs and there should be only one root between the domain. The range of the function is limited to range of double in current system. 

\subsection{Function Documentation}
\index{bisection.\+cpp@{bisection.\+cpp}!bisection@{bisection}}
\index{bisection@{bisection}!bisection.\+cpp@{bisection.\+cpp}}
\subsubsection[{\texorpdfstring{bisection(double($\ast$f)(double), double a, double b, double tol, int max\+Iteration)}{bisection(double(*f)(double), double a, double b, double tol, int maxIteration)}}]{\setlength{\rightskip}{0pt plus 5cm}double bisection (
\begin{DoxyParamCaption}
\item[{double($\ast$)(double)}]{f, }
\item[{double}]{a, }
\item[{double}]{b, }
\item[{double}]{tol, }
\item[{int}]{max\+Iteration}
\end{DoxyParamCaption}
)}\hypertarget{bisection_8cpp_afac1ad62f43478efd3c37fa6fb03f9ae}{}\label{bisection_8cpp_afac1ad62f43478efd3c37fa6fb03f9ae}


Bisection root finding function. 

Root finding by bisection function.


\begin{DoxyParams}{Parameters}
{\em f} & Function to be evaluated \\
\hline
{\em a} & Lower limit of domain as double \\
\hline
{\em b} & Upper limit of domain as double \\
\hline
{\em tol} & Tolerance of error as double \\
\hline
{\em max\+Iteration} & Maximum number of iterations as integer \\
\hline
\end{DoxyParams}
\index{bisection.\+cpp@{bisection.\+cpp}!bisection@{bisection}}
\index{bisection@{bisection}!bisection.\+cpp@{bisection.\+cpp}}
\subsubsection[{\texorpdfstring{bisection(double($\ast$f)(double), double a, double b)}{bisection(double(*f)(double), double a, double b)}}]{\setlength{\rightskip}{0pt plus 5cm}double bisection (
\begin{DoxyParamCaption}
\item[{double($\ast$)(double)}]{f, }
\item[{double}]{a, }
\item[{double}]{b}
\end{DoxyParamCaption}
)}\hypertarget{bisection_8cpp_ac995c7f4dab6edcddcae1f302aec7a99}{}\label{bisection_8cpp_ac995c7f4dab6edcddcae1f302aec7a99}


Bisection root finding function with default tolerance 1e-\/6 and maximun iterations 1e6. 

Root finding by bisection function with default tolerance and iterations.


\begin{DoxyParams}{Parameters}
{\em f} & Function to be evaluated as function \\
\hline
{\em a} & lower limit of domain as double \\
\hline
{\em b} & upper limit of domain as double \\
\hline
\end{DoxyParams}
